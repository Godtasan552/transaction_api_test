import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../controllers/auth_controller.dart';
import '../routes/app_routes.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö import

class AppDrawer extends StatelessWidget {
  const AppDrawer({super.key});

  @override
  Widget build(BuildContext context) {
    debugPrint('üéØ Building AppDrawer');
    
    return Drawer(
      child: GetBuilder<AuthController>(
        builder: (authController) {
          debugPrint('üîÑ Drawer GetBuilder rebuilding');
          debugPrint('Auth Controller: ${authController != null ? "‚úÖ Found" : "‚ùå Null"}');
          
          final user = authController.currentUser;
          debugPrint('Current User in Drawer: ${user?.fullName ?? "‚ùå None"}');

          return ListView(
            padding: EdgeInsets.zero,
            children: [
              // Header
              UserAccountsDrawerHeader(
                accountName: Text(
                  user?.fullName ?? "Guest User",
                  style: const TextStyle(
                    fontSize: 20, 
                    fontWeight: FontWeight.bold,
                  ),
                ),
                accountEmail: Text(
                  user?.email ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
                  style: const TextStyle(fontSize: 16),
                ),
                currentAccountPicture: const CircleAvatar(
                  backgroundColor: Colors.blueAccent,
                  child: Icon(
                    Icons.person, 
                    size: 40, 
                    color: Colors.white,
                  ),
                ),
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.blue, Colors.blueAccent],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
              ),
              
              // Debug Info
              Container(
                color: Colors.yellow[50],
                padding: const EdgeInsets.all(8),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'üêõ Drawer Debug:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text('User ID: ${user?.id ?? "‚ùå"}'),
                    Text('Email: ${user?.email ?? "‚ùå"}'),
                    Text('Full Name: ${user?.fullName ?? "‚ùå"}'),
                  ],
                ),
              ),
              
              const Divider(),
              
              // Menu Items
              ListTile(
                leading: const Icon(Icons.home, color: Colors.blue),
                title: const Text("‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"),
                onTap: () {
                  debugPrint('üè† Home menu tapped');
                  Navigator.of(context).pop();
                },
              ),
              
              ListTile(
                leading: const Icon(Icons.account_box, color: Colors.green),
                title: const Text("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö"),
                onTap: () {
                  debugPrint('‚ÑπÔ∏è About menu tapped');
                  Navigator.of(context).pop();
                  Get.snackbar(
                    '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö',
                    '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ',
                    backgroundColor: Colors.blue[100],
                  );
                },
              ),
              
              ListTile(
                leading: const Icon(Icons.grid_3x3_outlined, color: Colors.orange),
                title: const Text("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"),
                onTap: () {
                  debugPrint('üìù Create Transaction menu tapped');
                  Navigator.of(context).pop();
                  // ‡πÉ‡∏ä‡πâ route name ‡πÅ‡∏ó‡∏ô AppRoutes ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
                  try {
                    // Get.toNamed(AppRoutes.createTransaction);
                    Get.toNamed('/create-transaction'); // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ route name ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                  } catch (e) {
                    debugPrint('‚ùå Route error: $e');
                    Get.snackbar(
                      '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                      '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                      backgroundColor: Colors.red[100],
                    );
                  }
                },
              ),
              
              ListTile(
                leading: const Icon(Icons.contact_mail, color: Colors.purple),
                title: const Text("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"),
                onTap: () {
                  debugPrint('üìß Contact menu tapped');
                  Navigator.of(context).pop();
                  Get.snackbar(
                    '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
                    '‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠',
                    backgroundColor: Colors.purple[100],
                  );
                },
              ),
              
              const Divider(),
              
              ListTile(
                leading: const Icon(Icons.logout, color: Colors.red),
                title: const Text("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"),
                onTap: () {
                  debugPrint('üö™ Logout menu tapped');
                  Navigator.of(context).pop();
                  _showLogoutDialog(context, authController);
                },
              ),
            ],
          );
        },
      ),
    );
  }

  void _showLogoutDialog(BuildContext context, AuthController authController) {
    debugPrint('üö™ Showing logout dialog');
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'),
        content: const Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
        actions: [
          TextButton(
            onPressed: () {
              debugPrint('‚ùå Logout cancelled');
              Navigator.of(context).pop();
            },
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              debugPrint('‚úÖ Logout confirmed');
              Navigator.of(context).pop();
              authController.logout();
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }
}